#problem 1

Iterative Way

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        st = []
        prev = None
        while root != None or len(st) > 0:
            while root != None:
                st.append(root)
                root = root.left
            root = st.pop()
            if prev != None and prev.val >= root.val:
                return False
            prev = root
            root = root.right
        return True

Recursive Way

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        if root == None:
            return False
        
        self.prev = None
        self.isValid = True
        self.inorder(root)

        return self.isValid
    
    def inorder(self, root: Optional[TreeNode]) -> None:
        if root == None:
            return
        
        self.inorder(root.left)
        if self.prev != None and self.prev.val >= root.val:
            self.isValid = False
            return
        self.prev = root
        self.inorder(root.right)


#Problem 2

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if len(preorder) == 0 or len(inorder) == 0:
            return None
        
        root = TreeNode(preorder[0])
        mid = inorder.index(preorder[0])
        root.left = self.buildTree(preorder[1 : mid + 1], inorder[:mid])
        root.right = self.buildTree(preorder[mid + 1 : ], inorder[mid + 1: ])

        return root